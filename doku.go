package doku

import (
	"crypto/hmac"
	"crypto/sha256"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"math/rand"
)

func New(config *Config) *Client {
	return &Client{Config: config}
}

func (c *Client) WithRequestId(requestId string) *Client {
	c.requestId = requestId

	return c
}

func (c *Client) WithAutoGeneratedRequestId() *Client {
	randomLength := 8 + rand.Intn(120)

	c.requestId = RandomString(randomLength)

	return c
}

func (c *Client) generateRequestSignature(targetUri, timestamp string, payload interface{}) (*string, error) {
	toSign := fmt.Sprintf(
		"Client-Id:%s\nRequest-Id:%s\nRequest-Timestamp:%s\nRequest-Target:%s",
		c.Config.ClientID,
		c.requestId,
		timestamp,
		targetUri,
	)

	if payload != nil {
		bytePayload, err := json.Marshal(payload)
		if err != nil {
			return nil, err
		}

		h := sha256.New()

		h.Write(bytePayload)

		digest := base64.StdEncoding.EncodeToString(h.Sum(nil))

		toSign = fmt.Sprintf("%s\nDigest:%s", toSign, digest)
	}

	hm := hmac.New(sha256.New, []byte(c.Config.SecretKey))

	hm.Write([]byte(toSign))

	preSignature := base64.StdEncoding.EncodeToString(hm.Sum(nil))
	signature := fmt.Sprintf("HMACSHA256=%s", preSignature)

	return &signature, nil
}
